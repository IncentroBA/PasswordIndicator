import { useState, useRef, useEffect, createElement } from 'react';

function waitFor(elementClass, callback, parent) {
  const context = parent || document;
  if (context.querySelector(elementClass)) {
    callback();
  } else {
    const observer = new MutationObserver(() => {
      if (context.querySelector(elementClass)) {
        observer.disconnect();
        callback();
      }
    });

    // Start observing
    observer.observe(context, {
      childList: true,
      //This is a must have for the observer with subtree
      subtree: true //Set to true if changes must also be observed in descendants.
    });
  }
}

/* eslint-disable no-unused-expressions */
function PasswordIndicator({
  className,
  containDigit,
  containLowercase,
  containUppercase,
  containMinimalChars,
  containSpecialChars,
  lvl1Txt,
  lvl2Txt,
  lvl3Txt,
  lvl4Txt,
  lvl5Txt
}) {
  const [canRender, setCanRender] = useState(false);
  const passwordIndicator = useRef(null);
  const passwordText = useRef(null);
  let maxLevels = 0;
  if (containDigit === true) {
    maxLevels += 1;
  }
  if (containLowercase === true) {
    maxLevels += 1;
  }
  if (containUppercase === true) {
    maxLevels += 1;
  }
  if (containMinimalChars === true) {
    maxLevels += 1;
  }
  if (containSpecialChars === true) {
    maxLevels += 1;
  }
  function addIndicator() {
    setTimeout(() => {
      const passwordField = document.querySelector("." + className);
      const digit = new RegExp("^(?=.*[0-9]).{1,}$");
      const lowercase = new RegExp("^(?=.*[a-z]).{1,}$");
      const uppercase = new RegExp("^(?=.*[A-Z]).{1,}$");
      const minimalChars = new RegExp("^(?=.*[a-zA-Z]).{8,}$");
      const specialChars = new RegExp("^(?=.*[!@#$%^&*]).{1,}$");
      const passwordStrength = new Set();
      function feedbackTxt(text) {
        passwordText.current.innerHTML = text;
      }
      function updateIndicator(level) {
        passwordIndicator.current.dataset.level = level;
        if (maxLevels === 5) {
          level === 0 && feedbackTxt("");
          level === 1 && feedbackTxt(lvl1Txt.value);
          level === 2 && feedbackTxt(lvl2Txt.value);
          level === 3 && feedbackTxt(lvl3Txt.value);
          level === 4 && feedbackTxt(lvl4Txt.value);
          level === 5 && feedbackTxt(lvl5Txt.value);
        }
      }
      function handleInputChange(event) {
        const value = event.target.value;
        digit.test(value) ? passwordStrength.add("digit") : passwordStrength.delete("digit");
        lowercase.test(value) ? passwordStrength.add("lowercase") : passwordStrength.delete("lowercase");
        uppercase.test(value) ? passwordStrength.add("uppercase") : passwordStrength.delete("uppercase");
        minimalChars.test(value) ? passwordStrength.add("minimalChars") : passwordStrength.delete("minimalChars");
        specialChars.test(value) ? passwordStrength.add("specialChars") : passwordStrength.delete("specialChars");
        updateIndicator(passwordStrength.size);
      }
      passwordField.addEventListener("input", handleInputChange);
    }, 300);
  }
  useEffect(() => {
    console.info({
      passwordIndicator
    });
    if (passwordIndicator) {
      setCanRender(true);
      waitFor("." + className, addIndicator, document);
    }
  }, [passwordIndicator]);
  if (canRender) {
    return createElement("div", {
      className: "password-indicator",
      ref: passwordIndicator
    }, [...Array(maxLevels)].map(index => createElement("div", {
      className: "password-indicator__level",
      key: index
    })), createElement("span", {
      className: "mx-text password-indicator__text",
      ref: passwordText
    }));
  } else {
    return createElement("div", {
      className: "password-indicator"
    });
  }
}

export { PasswordIndicator as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFzc3dvcmRJbmRpY2F0b3IubWpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvaGVscGVycy93YWl0Rm9yLmpzIiwiLi4vLi4vLi4vLi4vLi4vc3JjL1Bhc3N3b3JkSW5kaWNhdG9yLmpzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gd2FpdEZvcihlbGVtZW50Q2xhc3MsIGNhbGxiYWNrLCBwYXJlbnQpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gcGFyZW50IHx8IGRvY3VtZW50O1xuXG4gICAgaWYgKGNvbnRleHQucXVlcnlTZWxlY3RvcihlbGVtZW50Q2xhc3MpKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PiB7XG4gICAgICAgICAgICBpZiAoY29udGV4dC5xdWVyeVNlbGVjdG9yKGVsZW1lbnRDbGFzcykpIHtcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gU3RhcnQgb2JzZXJ2aW5nXG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUoY29udGV4dCwge1xuICAgICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLCAvL1RoaXMgaXMgYSBtdXN0IGhhdmUgZm9yIHRoZSBvYnNlcnZlciB3aXRoIHN1YnRyZWVcbiAgICAgICAgICAgIHN1YnRyZWU6IHRydWUgLy9TZXQgdG8gdHJ1ZSBpZiBjaGFuZ2VzIG11c3QgYWxzbyBiZSBvYnNlcnZlZCBpbiBkZXNjZW5kYW50cy5cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG5pbXBvcnQgXCIuL3VpL1Bhc3N3b3JkSW5kaWNhdG9yLmNzc1wiO1xuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgdXNlUmVmLCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB3YWl0Rm9yIH0gZnJvbSBcIi4vaGVscGVycy93YWl0Rm9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBhc3N3b3JkSW5kaWNhdG9yKHtcbiAgICBjbGFzc05hbWUsXG4gICAgY29udGFpbkRpZ2l0LFxuICAgIGNvbnRhaW5Mb3dlcmNhc2UsXG4gICAgY29udGFpblVwcGVyY2FzZSxcbiAgICBjb250YWluTWluaW1hbENoYXJzLFxuICAgIGNvbnRhaW5TcGVjaWFsQ2hhcnMsXG4gICAgbHZsMVR4dCxcbiAgICBsdmwyVHh0LFxuICAgIGx2bDNUeHQsXG4gICAgbHZsNFR4dCxcbiAgICBsdmw1VHh0XG59KSB7XG4gICAgY29uc3QgW2NhblJlbmRlciwgc2V0Q2FuUmVuZGVyXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBjb25zdCBwYXNzd29yZEluZGljYXRvciA9IHVzZVJlZihudWxsKTtcbiAgICBjb25zdCBwYXNzd29yZFRleHQgPSB1c2VSZWYobnVsbCk7XG4gICAgbGV0IG1heExldmVscyA9IDA7XG5cbiAgICBpZiAoY29udGFpbkRpZ2l0ID09PSB0cnVlKSB7XG4gICAgICAgIG1heExldmVscyArPSAxO1xuICAgIH1cbiAgICBpZiAoY29udGFpbkxvd2VyY2FzZSA9PT0gdHJ1ZSkge1xuICAgICAgICBtYXhMZXZlbHMgKz0gMTtcbiAgICB9XG4gICAgaWYgKGNvbnRhaW5VcHBlcmNhc2UgPT09IHRydWUpIHtcbiAgICAgICAgbWF4TGV2ZWxzICs9IDE7XG4gICAgfVxuICAgIGlmIChjb250YWluTWluaW1hbENoYXJzID09PSB0cnVlKSB7XG4gICAgICAgIG1heExldmVscyArPSAxO1xuICAgIH1cbiAgICBpZiAoY29udGFpblNwZWNpYWxDaGFycyA9PT0gdHJ1ZSkge1xuICAgICAgICBtYXhMZXZlbHMgKz0gMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRJbmRpY2F0b3IoKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGFzc3dvcmRGaWVsZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyBjbGFzc05hbWUpO1xuICAgICAgICAgICAgY29uc3QgZGlnaXQgPSBuZXcgUmVnRXhwKFwiXig/PS4qWzAtOV0pLnsxLH0kXCIpO1xuICAgICAgICAgICAgY29uc3QgbG93ZXJjYXNlID0gbmV3IFJlZ0V4cChcIl4oPz0uKlthLXpdKS57MSx9JFwiKTtcbiAgICAgICAgICAgIGNvbnN0IHVwcGVyY2FzZSA9IG5ldyBSZWdFeHAoXCJeKD89LipbQS1aXSkuezEsfSRcIik7XG4gICAgICAgICAgICBjb25zdCBtaW5pbWFsQ2hhcnMgPSBuZXcgUmVnRXhwKFwiXig/PS4qW2EtekEtWl0pLns4LH0kXCIpO1xuICAgICAgICAgICAgY29uc3Qgc3BlY2lhbENoYXJzID0gbmV3IFJlZ0V4cChcIl4oPz0uKlshQCMkJV4mKl0pLnsxLH0kXCIpO1xuICAgICAgICAgICAgY29uc3QgcGFzc3dvcmRTdHJlbmd0aCA9IG5ldyBTZXQoKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gZmVlZGJhY2tUeHQodGV4dCkge1xuICAgICAgICAgICAgICAgIHBhc3N3b3JkVGV4dC5jdXJyZW50LmlubmVySFRNTCA9IHRleHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUluZGljYXRvcihsZXZlbCkge1xuICAgICAgICAgICAgICAgIHBhc3N3b3JkSW5kaWNhdG9yLmN1cnJlbnQuZGF0YXNldC5sZXZlbCA9IGxldmVsO1xuICAgICAgICAgICAgICAgIGlmIChtYXhMZXZlbHMgPT09IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWwgPT09IDAgJiYgZmVlZGJhY2tUeHQoXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIGxldmVsID09PSAxICYmIGZlZWRiYWNrVHh0KGx2bDFUeHQudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBsZXZlbCA9PT0gMiAmJiBmZWVkYmFja1R4dChsdmwyVHh0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWwgPT09IDMgJiYgZmVlZGJhY2tUeHQobHZsM1R4dC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGxldmVsID09PSA0ICYmIGZlZWRiYWNrVHh0KGx2bDRUeHQudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBsZXZlbCA9PT0gNSAmJiBmZWVkYmFja1R4dChsdmw1VHh0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZUlucHV0Q2hhbmdlKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBldmVudC50YXJnZXQudmFsdWU7XG5cbiAgICAgICAgICAgICAgICBkaWdpdC50ZXN0KHZhbHVlKSA/IHBhc3N3b3JkU3RyZW5ndGguYWRkKFwiZGlnaXRcIikgOiBwYXNzd29yZFN0cmVuZ3RoLmRlbGV0ZShcImRpZ2l0XCIpO1xuICAgICAgICAgICAgICAgIGxvd2VyY2FzZS50ZXN0KHZhbHVlKSA/IHBhc3N3b3JkU3RyZW5ndGguYWRkKFwibG93ZXJjYXNlXCIpIDogcGFzc3dvcmRTdHJlbmd0aC5kZWxldGUoXCJsb3dlcmNhc2VcIik7XG4gICAgICAgICAgICAgICAgdXBwZXJjYXNlLnRlc3QodmFsdWUpID8gcGFzc3dvcmRTdHJlbmd0aC5hZGQoXCJ1cHBlcmNhc2VcIikgOiBwYXNzd29yZFN0cmVuZ3RoLmRlbGV0ZShcInVwcGVyY2FzZVwiKTtcbiAgICAgICAgICAgICAgICBtaW5pbWFsQ2hhcnMudGVzdCh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgPyBwYXNzd29yZFN0cmVuZ3RoLmFkZChcIm1pbmltYWxDaGFyc1wiKVxuICAgICAgICAgICAgICAgICAgICA6IHBhc3N3b3JkU3RyZW5ndGguZGVsZXRlKFwibWluaW1hbENoYXJzXCIpO1xuICAgICAgICAgICAgICAgIHNwZWNpYWxDaGFycy50ZXN0KHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICA/IHBhc3N3b3JkU3RyZW5ndGguYWRkKFwic3BlY2lhbENoYXJzXCIpXG4gICAgICAgICAgICAgICAgICAgIDogcGFzc3dvcmRTdHJlbmd0aC5kZWxldGUoXCJzcGVjaWFsQ2hhcnNcIik7XG5cbiAgICAgICAgICAgICAgICB1cGRhdGVJbmRpY2F0b3IocGFzc3dvcmRTdHJlbmd0aC5zaXplKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFzc3dvcmRGaWVsZC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgaGFuZGxlSW5wdXRDaGFuZ2UpO1xuICAgICAgICB9LCAzMDApO1xuICAgIH1cblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuaW5mbyh7IHBhc3N3b3JkSW5kaWNhdG9yIH0pO1xuICAgICAgICBpZiAocGFzc3dvcmRJbmRpY2F0b3IpIHtcbiAgICAgICAgICAgIHNldENhblJlbmRlcih0cnVlKTtcbiAgICAgICAgICAgIHdhaXRGb3IoXCIuXCIgKyBjbGFzc05hbWUsIGFkZEluZGljYXRvciwgZG9jdW1lbnQpO1xuICAgICAgICB9XG4gICAgfSwgW3Bhc3N3b3JkSW5kaWNhdG9yXSk7XG5cbiAgICBpZiAoY2FuUmVuZGVyKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhc3N3b3JkLWluZGljYXRvclwiIHJlZj17cGFzc3dvcmRJbmRpY2F0b3J9PlxuICAgICAgICAgICAgICAgIHtbLi4uQXJyYXkobWF4TGV2ZWxzKV0ubWFwKGluZGV4ID0+IChcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYXNzd29yZC1pbmRpY2F0b3JfX2xldmVsXCIga2V5PXtpbmRleH0+PC9kaXY+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibXgtdGV4dCBwYXNzd29yZC1pbmRpY2F0b3JfX3RleHRcIiByZWY9e3Bhc3N3b3JkVGV4dH0+PC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwicGFzc3dvcmQtaW5kaWNhdG9yXCI+PC9kaXY+O1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJ3YWl0Rm9yIiwiZWxlbWVudENsYXNzIiwiY2FsbGJhY2siLCJwYXJlbnQiLCJjb250ZXh0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwib2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiZGlzY29ubmVjdCIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiUGFzc3dvcmRJbmRpY2F0b3IiLCJjbGFzc05hbWUiLCJjb250YWluRGlnaXQiLCJjb250YWluTG93ZXJjYXNlIiwiY29udGFpblVwcGVyY2FzZSIsImNvbnRhaW5NaW5pbWFsQ2hhcnMiLCJjb250YWluU3BlY2lhbENoYXJzIiwibHZsMVR4dCIsImx2bDJUeHQiLCJsdmwzVHh0IiwibHZsNFR4dCIsImx2bDVUeHQiLCJjYW5SZW5kZXIiLCJzZXRDYW5SZW5kZXIiLCJ1c2VTdGF0ZSIsInBhc3N3b3JkSW5kaWNhdG9yIiwidXNlUmVmIiwicGFzc3dvcmRUZXh0IiwibWF4TGV2ZWxzIiwiYWRkSW5kaWNhdG9yIiwic2V0VGltZW91dCIsInBhc3N3b3JkRmllbGQiLCJkaWdpdCIsIlJlZ0V4cCIsImxvd2VyY2FzZSIsInVwcGVyY2FzZSIsIm1pbmltYWxDaGFycyIsInNwZWNpYWxDaGFycyIsInBhc3N3b3JkU3RyZW5ndGgiLCJTZXQiLCJmZWVkYmFja1R4dCIsInRleHQiLCJjdXJyZW50IiwiaW5uZXJIVE1MIiwidXBkYXRlSW5kaWNhdG9yIiwibGV2ZWwiLCJkYXRhc2V0IiwidmFsdWUiLCJoYW5kbGVJbnB1dENoYW5nZSIsImV2ZW50IiwidGFyZ2V0IiwidGVzdCIsImFkZCIsImRlbGV0ZSIsInNpemUiLCJhZGRFdmVudExpc3RlbmVyIiwidXNlRWZmZWN0IiwiY29uc29sZSIsImluZm8iLCJjcmVhdGVFbGVtZW50IiwicmVmIiwiQXJyYXkiLCJtYXAiLCJpbmRleCIsImtleSJdLCJtYXBwaW5ncyI6Ijs7QUFBTyxTQUFTQSxPQUFPQSxDQUFDQyxZQUFZLEVBQUVDLFFBQVEsRUFBRUMsTUFBTSxFQUFFO0FBQ3BELEVBQUEsTUFBTUMsT0FBTyxHQUFHRCxNQUFNLElBQUlFLFFBQVEsQ0FBQTtBQUVsQyxFQUFBLElBQUlELE9BQU8sQ0FBQ0UsYUFBYSxDQUFDTCxZQUFZLENBQUMsRUFBRTtBQUNyQ0MsSUFBQUEsUUFBUSxFQUFFLENBQUE7QUFDZCxHQUFDLE1BQU07QUFDSCxJQUFBLE1BQU1LLFFBQVEsR0FBRyxJQUFJQyxnQkFBZ0IsQ0FBQyxNQUFNO0FBQ3hDLE1BQUEsSUFBSUosT0FBTyxDQUFDRSxhQUFhLENBQUNMLFlBQVksQ0FBQyxFQUFFO1FBQ3JDTSxRQUFRLENBQUNFLFVBQVUsRUFBRSxDQUFBO0FBQ3JCUCxRQUFBQSxRQUFRLEVBQUUsQ0FBQTtBQUNkLE9BQUE7QUFDSixLQUFDLENBQUMsQ0FBQTs7QUFFRjtBQUNBSyxJQUFBQSxRQUFRLENBQUNHLE9BQU8sQ0FBQ04sT0FBTyxFQUFFO0FBQ3RCTyxNQUFBQSxTQUFTLEVBQUUsSUFBSTtBQUFFO01BQ2pCQyxPQUFPLEVBQUUsSUFBSTtBQUNqQixLQUFDLENBQUMsQ0FBQTtBQUNOLEdBQUE7QUFDSjs7QUNuQkE7QUFLZSxTQUFTQyxpQkFBaUJBLENBQUM7RUFDdENDLFNBQVM7RUFDVEMsWUFBWTtFQUNaQyxnQkFBZ0I7RUFDaEJDLGdCQUFnQjtFQUNoQkMsbUJBQW1CO0VBQ25CQyxtQkFBbUI7RUFDbkJDLE9BQU87RUFDUEMsT0FBTztFQUNQQyxPQUFPO0VBQ1BDLE9BQU87QUFDUEMsRUFBQUEsT0FBQUE7QUFDSixDQUFDLEVBQUU7RUFDQyxNQUFNLENBQUNDLFNBQVMs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
