
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35730/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { useState, useRef, useEffect, createElement } from 'react';

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".password-indicator {\n  display: flex;\n  padding-bottom: calc(24px - 8px);\n  position: relative;\n}\n\n.password-indicator__level {\n  background-color: #515151;\n  flex: 1;\n  height: 4px;\n  margin-bottom: 8px;\n}\n\n.password-indicator__level + .password-indicator__level {\n  margin-left: 4px;\n}\n\n.password-indicator__text {\n  bottom: 0;\n  position: absolute;\n  right: 0;\n}\n\n.password-indicator[data-level=\"1\"] {color: red;}\n\n.password-indicator[data-level=\"1\"] .password-indicator__level:nth-child(5n+1) {\n  background-color: currentColor;\n}\n\n.password-indicator[data-level=\"2\"] {color: orange;}\n\n.password-indicator[data-level=\"2\"] .password-indicator__level:nth-child(5n+1),\n.password-indicator[data-level=\"2\"] .password-indicator__level:nth-child(5n+2) {\n  background-color: currentColor;\n}\n\n.password-indicator[data-level=\"3\"] {color: green;}\n\n.password-indicator[data-level=\"3\"] .password-indicator__level:nth-child(5n+1),\n.password-indicator[data-level=\"3\"] .password-indicator__level:nth-child(5n+2),\n.password-indicator[data-level=\"3\"] .password-indicator__level:nth-child(5n+3) {\n  background-color: currentColor;\n}\n\n.password-indicator[data-level=\"4\"] {color: green;}\n\n.password-indicator[data-level=\"4\"] .password-indicator__level:nth-child(5n+1),\n.password-indicator[data-level=\"4\"] .password-indicator__level:nth-child(5n+2),\n.password-indicator[data-level=\"4\"] .password-indicator__level:nth-child(5n+3),\n.password-indicator[data-level=\"4\"] .password-indicator__level:nth-child(5n+4) {\n  background-color: currentColor;\n}\n\n.password-indicator[data-level=\"5\"] {color: green;}\n\n.password-indicator[data-level=\"5\"] .password-indicator__level:nth-child(5n+1),\n.password-indicator[data-level=\"5\"] .password-indicator__level:nth-child(5n+2),\n.password-indicator[data-level=\"5\"] .password-indicator__level:nth-child(5n+3),\n.password-indicator[data-level=\"5\"] .password-indicator__level:nth-child(5n+4),\n.password-indicator[data-level=\"5\"] .password-indicator__level:nth-child(5n+5) {\n  background-color: currentColor;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlBhc3N3b3JkSW5kaWNhdG9yLmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQWE7RUFDYixnQ0FBZ0M7RUFDaEMsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLE9BQU87RUFDUCxXQUFXO0VBQ1gsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsU0FBUztFQUNULGtCQUFrQjtFQUNsQixRQUFRO0FBQ1Y7O0FBRUEscUNBQXFDLFVBQVUsQ0FBQzs7QUFDaEQ7RUFDRSw4QkFBOEI7QUFDaEM7O0FBRUEscUNBQXFDLGFBQWEsQ0FBQzs7QUFDbkQ7O0VBRUUsOEJBQThCO0FBQ2hDOztBQUVBLHFDQUFxQyxZQUFZLENBQUM7O0FBQ2xEOzs7RUFHRSw4QkFBOEI7QUFDaEM7O0FBRUEscUNBQXFDLFlBQVksQ0FBQzs7QUFDbEQ7Ozs7RUFJRSw4QkFBOEI7QUFDaEM7O0FBRUEscUNBQXFDLFlBQVksQ0FBQzs7QUFDbEQ7Ozs7O0VBS0UsOEJBQThCO0FBQ2hDIiwiZmlsZSI6IlBhc3N3b3JkSW5kaWNhdG9yLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5wYXNzd29yZC1pbmRpY2F0b3Ige1xuICBkaXNwbGF5OiBmbGV4O1xuICBwYWRkaW5nLWJvdHRvbTogY2FsYygyNHB4IC0gOHB4KTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4ucGFzc3dvcmQtaW5kaWNhdG9yX19sZXZlbCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICM1MTUxNTE7XG4gIGZsZXg6IDE7XG4gIGhlaWdodDogNHB4O1xuICBtYXJnaW4tYm90dG9tOiA4cHg7XG59XG5cbi5wYXNzd29yZC1pbmRpY2F0b3JfX2xldmVsICsgLnBhc3N3b3JkLWluZGljYXRvcl9fbGV2ZWwge1xuICBtYXJnaW4tbGVmdDogNHB4O1xufVxuXG4ucGFzc3dvcmQtaW5kaWNhdG9yX190ZXh0IHtcbiAgYm90dG9tOiAwO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHJpZ2h0OiAwO1xufVxuXG4ucGFzc3dvcmQtaW5kaWNhdG9yW2RhdGEtbGV2ZWw9XCIxXCJdIHtjb2xvcjogcmVkO31cbi5wYXNzd29yZC1pbmRpY2F0b3JbZGF0YS1sZXZlbD1cIjFcIl0gLnBhc3N3b3JkLWluZGljYXRvcl9fbGV2ZWw6bnRoLWNoaWxkKDVuKzEpIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogY3VycmVudENvbG9yO1xufVxuXG4ucGFzc3dvcmQtaW5kaWNhdG9yW2RhdGEtbGV2ZWw9XCIyXCJdIHtjb2xvcjogb3JhbmdlO31cbi5wYXNzd29yZC1pbmRpY2F0b3JbZGF0YS1sZXZlbD1cIjJcIl0gLnBhc3N3b3JkLWluZGljYXRvcl9fbGV2ZWw6bnRoLWNoaWxkKDVuKzEpLFxuLnBhc3N3b3JkLWluZGljYXRvcltkYXRhLWxldmVsPVwiMlwiXSAucGFzc3dvcmQtaW5kaWNhdG9yX19sZXZlbDpudGgtY2hpbGQoNW4rMikge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBjdXJyZW50Q29sb3I7XG59XG5cbi5wYXNzd29yZC1pbmRpY2F0b3JbZGF0YS1sZXZlbD1cIjNcIl0ge2NvbG9yOiBncmVlbjt9XG4ucGFzc3dvcmQtaW5kaWNhdG9yW2RhdGEtbGV2ZWw9XCIzXCJdIC5wYXNzd29yZC1pbmRpY2F0b3JfX2xldmVsOm50aC1jaGlsZCg1bisxKSxcbi5wYXNzd29yZC1pbmRpY2F0b3JbZGF0YS1sZXZlbD1cIjNcIl0gLnBhc3N3b3JkLWluZGljYXRvcl9fbGV2ZWw6bnRoLWNoaWxkKDVuKzIpLFxuLnBhc3N3b3JkLWluZGljYXRvcltkYXRhLWxldmVsPVwiM1wiXSAucGFzc3dvcmQtaW5kaWNhdG9yX19sZXZlbDpudGgtY2hpbGQoNW4rMykge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBjdXJyZW50Q29sb3I7XG59XG5cbi5wYXNzd29yZC1pbmRpY2F0b3JbZGF0YS1sZXZlbD1cIjRcIl0ge2NvbG9yOiBncmVlbjt9XG4ucGFzc3dvcmQtaW5kaWNhdG9yW2RhdGEtbGV2ZWw9XCI0XCJdIC5wYXNzd29yZC1pbmRpY2F0b3JfX2xldmVsOm50aC1jaGlsZCg1bisxKSxcbi5wYXNzd29yZC1pbmRpY2F0b3JbZGF0YS1sZXZlbD1cIjRcIl0gLnBhc3N3b3JkLWluZGljYXRvcl9fbGV2ZWw6bnRoLWNoaWxkKDVuKzIpLFxuLnBhc3N3b3JkLWluZGljYXRvcltkYXRhLWxldmVsPVwiNFwiXSAucGFzc3dvcmQtaW5kaWNhdG9yX19sZXZlbDpudGgtY2hpbGQoNW4rMyksXG4ucGFzc3dvcmQtaW5kaWNhdG9yW2RhdGEtbGV2ZWw9XCI0XCJdIC5wYXNzd29yZC1pbmRpY2F0b3JfX2xldmVsOm50aC1jaGlsZCg1bis0KSB7XG4gIGJhY2tncm91bmQtY29sb3I6IGN1cnJlbnRDb2xvcjtcbn1cblxuLnBhc3N3b3JkLWluZGljYXRvcltkYXRhLWxldmVsPVwiNVwiXSB7Y29sb3I6IGdyZWVuO31cbi5wYXNzd29yZC1pbmRpY2F0b3JbZGF0YS1sZXZlbD1cIjVcIl0gLnBhc3N3b3JkLWluZGljYXRvcl9fbGV2ZWw6bnRoLWNoaWxkKDVuKzEpLFxuLnBhc3N3b3JkLWluZGljYXRvcltkYXRhLWxldmVsPVwiNVwiXSAucGFzc3dvcmQtaW5kaWNhdG9yX19sZXZlbDpudGgtY2hpbGQoNW4rMiksXG4ucGFzc3dvcmQtaW5kaWNhdG9yW2RhdGEtbGV2ZWw9XCI1XCJdIC5wYXNzd29yZC1pbmRpY2F0b3JfX2xldmVsOm50aC1jaGlsZCg1biszKSxcbi5wYXNzd29yZC1pbmRpY2F0b3JbZGF0YS1sZXZlbD1cIjVcIl0gLnBhc3N3b3JkLWluZGljYXRvcl9fbGV2ZWw6bnRoLWNoaWxkKDVuKzQpLFxuLnBhc3N3b3JkLWluZGljYXRvcltkYXRhLWxldmVsPVwiNVwiXSAucGFzc3dvcmQtaW5kaWNhdG9yX19sZXZlbDpudGgtY2hpbGQoNW4rNSkge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBjdXJyZW50Q29sb3I7XG59Il19 */";
styleInject(css_248z);

function waitFor(elementClass, callback, parent) {
  const context = parent || document;

  if (context.querySelector(elementClass)) {
    callback();
  } else {
    const observer = new MutationObserver(() => {
      if (context.querySelector(elementClass)) {
        observer.disconnect();
        callback();
      }
    }); // Start observing

    observer.observe(context, {
      childList: true,
      //This is a must have for the observer with subtree
      subtree: true //Set to true if changes must also be observed in descendants.

    });
  }
}

/* eslint-disable no-unused-expressions */
function PasswordIndicator({
  className,
  containDigit,
  containLowercase,
  containUppercase,
  containMinimalChars,
  containSpecialChars,
  lvl1Txt,
  lvl2Txt,
  lvl3Txt,
  lvl4Txt,
  lvl5Txt
}) {
  const [canRender, setCanRender] = useState(false);
  const passwordIndicator = useRef(null);
  const passwordText = useRef(null);
  let maxLevels = 0;

  if (containDigit === true) {
    maxLevels += 1;
  }

  if (containLowercase === true) {
    maxLevels += 1;
  }

  if (containUppercase === true) {
    maxLevels += 1;
  }

  if (containMinimalChars === true) {
    maxLevels += 1;
  }

  if (containSpecialChars === true) {
    maxLevels += 1;
  }

  function addIndicator() {
    setTimeout(() => {
      const passwordField = document.querySelector("." + className);
      const digit = new RegExp("^(?=.*[0-9]).{1,}$");
      const lowercase = new RegExp("^(?=.*[a-z]).{1,}$");
      const uppercase = new RegExp("^(?=.*[A-Z]).{1,}$");
      const minimalChars = new RegExp("^(?=.*[a-zA-Z]).{8,}$");
      const specialChars = new RegExp("^(?=.*[!@#$%^&*]).{1,}$");
      const passwordStrength = new Set();

      function feedbackTxt(text) {
        passwordText.current.innerHTML = text;
      }

      function updateIndicator(level) {
        passwordIndicator.current.dataset.level = level;

        if (maxLevels === 5) {
          level === 0 && feedbackTxt("");
          level === 1 && feedbackTxt(lvl1Txt.value);
          level === 2 && feedbackTxt(lvl2Txt.value);
          level === 3 && feedbackTxt(lvl3Txt.value);
          level === 4 && feedbackTxt(lvl4Txt.value);
          level === 5 && feedbackTxt(lvl5Txt.value);
        }
      }

      function handleInputChange(event) {
        const value = event.target.value;
        digit.test(value) ? passwordStrength.add("digit") : passwordStrength.delete("digit");
        lowercase.test(value) ? passwordStrength.add("lowercase") : passwordStrength.delete("lowercase");
        uppercase.test(value) ? passwordStrength.add("uppercase") : passwordStrength.delete("uppercase");
        minimalChars.test(value) ? passwordStrength.add("minimalChars") : passwordStrength.delete("minimalChars");
        specialChars.test(value) ? passwordStrength.add("specialChars") : passwordStrength.delete("specialChars");
        updateIndicator(passwordStrength.size);
      }

      passwordField.addEventListener("input", handleInputChange);
    }, 300);
  }

  useEffect(() => {
    console.info({
      passwordIndicator
    });

    if (passwordIndicator) {
      setCanRender(true);
      waitFor("." + className, addIndicator, document);
    }
  }, [passwordIndicator]);

  if (canRender) {
    return createElement("div", {
      className: "password-indicator",
      ref: passwordIndicator
    }, [...Array(maxLevels)].map(index => createElement("div", {
      className: "password-indicator__level",
      key: index
    })), createElement("span", {
      className: "mx-text password-indicator__text",
      ref: passwordText
    }));
  } else {
    return createElement("div", {
      className: "password-indicator"
    });
  }
}

export { PasswordIndicator as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
